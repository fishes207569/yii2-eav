<?php

namespace ccheng\eav\common\models;

use ccheng\task\common\helpers\ModelHelpers;
use common\base\ActiveRecord;
use common\enums\FlagEnum;
use common\enums\MarkEnum;
use common\models\video\VideoData;
use yii\base\BaseObject;
use yii\base\DynamicModel;
use yii\base\InvalidConfigException;
use yii\validators\RequiredValidator;
use yii\web\UnprocessableEntityHttpException;

class EavModel extends DynamicModel
{
    /** @var EavEntity */
    public $eavEntity;

    /** @var VideoData */
    public $model;

    /** @var EavAttribute[] */
    protected $eavAttributes;

    /** @var EavEntityModel */
    public $eavEntityModel;

    public function init()
    {
        if ($this->eavEntity) {
            foreach ($this->eavEntity->eavAttributes as $eavAttribute) {

                if ($eavAttribute->attribute_is_required == FlagEnum::YES) {
                    $this->addRule($eavAttribute->attribute_code, 'required');
                } else {
                    $this->addRule($eavAttribute->attribute_code, 'safe');
                }
                if ($eavAttribute->attribute_multiple_value == FlagEnum::YES) {
                    $this->defineAttribute($eavAttribute->attribute_code, json_decode($eavAttribute->attribute_default_value, true));
                    $this->addRule($eavAttribute->attribute_code, 'filter', ['filter' => function ($value) {
                        if (!is_array($value)) {
                            return array_unique(explode('|', $value));
                        } else {
                            return $value;
                        }
                    }]);
                    $this->addRule($eavAttribute->attribute_code, function ($attribute, $params) {
                        if (!is_array($this->$attribute)) {
                            $this->addError($attribute, 'eav 属性值格式错误');
                        }
                    });

                } else {
                    $this->defineAttribute($eavAttribute->attribute_code, $eavAttribute->attribute_default_value);
                    $this->addRule($eavAttribute->attribute_code, 'string');
                }

            }
        }
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function save()
    {
        if ($this->validate()) {
            if (!$this->eavEntityModel) {
                $modelEavEntity = new EavEntityModel();
                $modelEavEntity->entity_model_entity_id = $this->eavEntity->id;
                $modelEavEntity->entity_model_entity_code = $this->eavEntity->entity_code;
                $modelEavEntity->entity_model_model_id = $this->model->id;
                $modelEavEntity->entity_model_model_class = $this->model::className();
                if (!$modelEavEntity->save()) {
                    throw new UnprocessableEntityHttpException($modelEavEntity->getFirstErrorMsg());
                }
                $this->eavEntityModel = $modelEavEntity;
            }
            foreach ($this->attributes as $attribute_code => $attribute_value) {
                if ($entityAttributeValue = $this->eavEntityModel->getEavEntityAttributeValue($attribute_code)->one()) {
                } else {
                    /** @var EavEntityAttribute $entityAttribute */
                    $entityAttribute = $this->eavEntity->getEavEntityAttribute($attribute_code)->one();
                    $entityAttributeValue = new EavAttributeValue();
                    $entityAttributeValue->attribute_value_entity_attribute_id = $entityAttribute->id;
                    $entityAttributeValue->attribute_value_entity_id = $this->eavEntity->id;
                    $entityAttributeValue->attribute_value_entity_model_id = $this->eavEntityModel->id;
                    $entityAttributeValue->attribute_value_attribute_code = $entityAttribute->entity_attribute_attribute_code;
                }
                $entityAttributeValue->attribute_value = $attribute_value;
                if (!$entityAttributeValue->save()) {
                    throw new UnprocessableEntityHttpException($entityAttributeValue->getFirstErrorMsg());
                }
            }

        } else {
            throw new UnprocessableEntityHttpException(ModelHelpers::getModelError($this));
        }
    }
}